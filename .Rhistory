data1<-read.csv('traffic_900.csv');
library(forecast);
train<-data1[1:600,1];
test<-data1[601:900,1];
sensor<-ts(train,frequency=15);
fit <- auto.arima(sensor,approximation=FALSE,trace=FALSE);
fcast <- forecast(fit,h=300,level=c(80,95));# typeof(fcast)
res <- data.frame(fcast[[4]],fcast[[5]],fcast[[6]]);#transfer time series back to data frame
write.csv(res, "predicted_results_off.csv")
require(dlm)
install.packages("dlm")
require(dlm)
TOI = read.csv("traffic_900.csv", header = FALSE)
TOI = ts(TOI)
plot(TOI)
train = TOI[1:600]
test = TOI[601:900]
tsbuild15 = function(parm) {
mod = dlmModPoly(order = 2, dV = exp(parm[1]), dW = c(exp(parm[2]),exp(parm[3]) )) + dlmModSeas(frequency = 15,dV = exp(parm[4]), dW = c(exp(parm[5]),rep(0,13)))
mod$FF[1,1] = parm[6]
mod$GG[1,1] = parm[7]
mod$GG[1,2] = parm[8]
mod$GG[2,2] = parm[9]
return(mod)
}
y = train
fit15 = dlmMLE(y, c(rep(0,5),rep(1,4)), tsbuild15)
Pred15 = dlmFilter(TOI[1:900],tsbuild15(fit15$par))
Q15 = vector(mode = "numeric", length = 900)
for(ii in 1:900)
Q15[ii] = Pred15$mod$F %*% dlmSvd2var(Pred15$U.R[[ii]],Pred15$D.R[ii,])%*% t(Pred15$mod$F) + Pred15$mod$V
lower90 = Pred15$f[601:900]-1.645*sqrt(Q15)
upper90 = Pred15$f[601:900]+1.645*sqrt(Q15)
lower95 = Pred15$f[601:900]-1.96*sqrt(Q15)
upper95 = Pred15$f[601:900]+1.96*sqrt(Q15)
lower99 = Pred15$f[601:900]-2.575*sqrt(Q15)
upper99 = Pred15$f[601:900]+2.575*sqrt(Q15)
source('E:/Lei_projects/bordercrossing/border crossing Interval Prediction/review_revise_3rd/traffic_uncertainty/arima_analysis_for_adaptive_kf.R')
data1<-read.csv('traffic_900.csv');
data1<-read.csv('traffic_900.csv');
library(forecast);
train<-data1[1:600,1];
test<-data1[601:900,1];
sensor<-ts(train,frequency=15);
fit <- auto.arima(sensor,approximation=FALSE,trace=FALSE);
train_season <- 0.116* train[1:570] + 0.411 * train[16:585]
data1_season <- 0.116* data1[1:870,1] + 0.411 * data1[16:885,1]
write.csv(data1_season, 'seasonal_before_kf.csv')
train_no_season <- train[31:600] - train_season
plot(train_no_season)
data1_no_season <- data1[31:900,1] - 0.116 * data1[1:870,1] - 0.411 * data1[16:885,1]
train_no_season_arma <- 0.754*train_no_season[1:569] # 2:570 arma part + 30 -> 32:600
data1_no_season_arma <- 0.754 * data1_no_season[1:869] # 2:870 arma + 30 -> 32:900 part
write.csv(data1_no_season_arma,'kf_arima.csv')
train_residuals <- train_no_season[2:570] - train_no_season_arma
plot(train_residuals)
data1_no_season_residuals <- data1_no_season[2:870] - data1_no_season_arma
write.csv(data1_no_season_residuals^2,'kf_garch.csv')
require(dlm)
tsbuildkf1 = function(parm) {
mod = dlmModPoly(order = 1, dV = exp(parm[1]), dW = c(exp(parm[2])))
mod$FF[1] = parm[3] # for a vector, we have to add [1]
mod$GG[1] = parm[4]
return(mod)
}
y = ts(train_no_season_arma)
fitkf1 = dlmMLE(y, c(rep(0,2), rep(1,2)), tsbuildkf1)
tsbuildkf2 = function(parm) {
mod = dlmModPoly(order = 3, dV = exp(parm[1]), dW = c(exp(parm[2]), exp(parm[3]), exp(parm[4])))
mod$FF[1] = parm[5] # for a vector, we have to add [1]
mod$FF[2] = parm[6]
mod$FF[3] = parm[7]
mod$GG[1,1] = parm[8]
mod$GG[2,2] = parm[9]
mod$GG[3,3] = parm[10]
return(mod)
}
y= ts(train_residuals^2) # calculate square
fitkf2 = dlmMLE(y, c(rep(0,3), rep(1,7)), tsbuildkf2)
traffic_season <- read.csv('seasonal_before_kf.csv')
traffic_arma <- read.csv('kf_arima_predicted_N_100.csv')
traffic_season <- read.csv('seasonal_before_kf.csv')
traffic_arma <- read.csv('kf_arima_predicted_N_100.csv')
traffic_variance <- read.csv('kf_garch_predicted_N_200.csv')
